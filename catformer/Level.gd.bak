extends Node2D

@export var level_data: LevelData
var platform_scene = preload("res://Platform.tscn")
var goal_scene = preload("res://Goal.tscn")

# Platform pooling
var platform_pool_manager: SimplePlatformPoolManager
var current_level_platforms: Array = []

signal level_completed

func _ready():
	# Initialize platform pool manager
	platform_pool_manager = SimplePlatformPoolManager.new()
	add_child(platform_pool_manager)

func load_level(data: LevelData):
	if not data:
		print("Error: LevelData is null!")
		return
		
	level_data = data
	
	var player = $Player
	if not player:
		print("Error: Player node not found!")
		return
		
	if player.has_method("set_spawn_position"):
		player.set_spawn_position(data.player_spawn_position)
	else:
		player.global_position = data.player_spawn_position
	
	# Defer the platform and goal creation to avoid physics query conflicts
	call_deferred("_create_level_objects", data)
	
	var level_label = $UI/LevelLabel
	level_label.text = "Level " + str(data.level_number)
	var font_size = GameConfig.current.level_label_font_size if GameConfig.current else 24
	level_label.add_theme_font_size_override("font_size", font_size)
	
	# Emit level loaded event through event bus
	GameEventBus.emit_level_loaded(data)

func _create_level_objects(data: LevelData):
	# Clear existing platforms using pool manager
	_clear_current_platforms()
	
	# Clear existing goals
	var existing_goals = get_children().filter(func(child): return child is Goal)
	for goal in existing_goals:
		goal.queue_free()
	
	# Create platforms using pool manager
	var platforms_node = $Platforms
	current_level_platforms = platform_pool_manager.create_level_platforms(data, platforms_node)
	
	# Emit platform creation events
	for i in range(current_level_platforms.size()):
		var platform = current_level_platforms[i]
		var platform_data = data.platforms[i]
		GameEventBus.platform_created.emit(platform, platform_data)
	
	var goal = goal_scene.instantiate()
	goal.global_position = data.goal_position
	add_child(goal)
	print("Connecting goal signal...")
	goal.goal_reached.connect(_on_goal_reached)
	print("Goal created at position: ", data.goal_position)
	print("Goal children: ", goal.get_children())

func _on_goal_reached(_body):
	print("Level completed! Moving to next level...")
	level_completed.emit()
	# Also emit through the global event bus
	GameEventBus.emit_level_completed(level_data.level_number if level_data else 0)

# Clear current platforms using pool manager
func _clear_current_platforms():
	if platform_pool_manager and not current_level_platforms.is_empty():
		platform_pool_manager.clear_level_platforms(current_level_platforms)
		current_level_platforms.clear()
		GameEventBus.platforms_cleared.emit()

# Get pool statistics for debugging
func get_platform_pool_statistics() -> Dictionary:
	if platform_pool_manager:
		return platform_pool_manager.get_all_pool_statistics()
	return {}

# Clean up when level is destroyed
func _exit_tree():
	_clear_current_platforms()
